<div class="scroll" style="
  transform: translate(@(Data.pos.x)px, @(Data.pos.y)px);
  background-color: @(Top && Cull ? "red" : (Edit ? "white" : "black"));
">
  <input @bind="Data.name" @bind:event="oninput" type="text" class="@(!Edit ? "no-select" : "")" style="
    width: @(Data.area.x)px;
	  background-color: @(Top && Cull ? "red" : Data.color);
  " />

  @* <div style="
    pointer-events: none; user-select: none;
    position: absolute; left: 33.33%; right: 33.33%; bottom: 4px;
    background-color: @(Edit ? "#eee" : "#333");
    height: 2px;
    z-index: -1;
  "></div> *@
  <textarea @bind="Data.text" @bind:event="oninput" class="contents @(!Edit ? "no-select" : "")" style="
    width: @(Data.area.x)px; height: @(Data.area.y)px; 
    color: @(Top && Cull || Edit ? "black" : "white");
  "></textarea>


  <div hidden="@(Edit)" style="
    user-select: none; moz-user-select: none; -webkit-user-select: none;
    position: fixed; top: 0; left: 0; right: 0; bottom: 0;
    @(Top && Pull ? "outline: 1px solid white;": "");
    @(Top && Held ? "outline: 1px solid black;": "");
    cursor: move;
  ">
    <div hidden="@(!Data.executable)" @onclick="(e) => Index.Run(Data)" style="
      position: absolute;
      user-select: all;
      transform: translate(0px, 0px);
      @(Data.executable ? "outline: 1px solid white;": "");
      outline-offset: -1px;
      height: 30px; width: 100%;
    "></div>

    <div class="pull" style="
      transform: translate(@(Data.area.x - 10)px, @(Data.area.y + 20)px);
      width:  30px; 
      height: 30px;
      cursor: nwse-resize;
    ">
      <div style="
        transform: translate(20px, 20px);
        width:  5px; 
        height: 5px;
        background-color: #808080;
      "></div>
    </div>
  </div>


</div>

@code {
  [Parameter]
  public Scroll Data { get; set; } = new Scroll();
  [Parameter]
  public IndexBase Index { get; set; }

  [Parameter] public bool Top  { get; set; }
  [Parameter] public bool Next { get; set; }


  string outlineColor { get {
    string color    = "#00000022";
    if (Top) color  = "#ffffffff";
    if (Next) color = "#000000ff";
    return color;
  }}

  public bool Edit { 
    get { return Data.edit; }
  }
  [Parameter] public bool Held { get; set; }
  [Parameter] public bool Pull { get; set; }
  [Parameter] public bool Cull { get; set; }
}

@* 
@onmousedown="() => AddNode(true)"
@onmousedown="@(Shelved ? IndexBased.AddNode : ()=> {})"
 *@