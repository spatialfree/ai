<div class="node" style="
  transform: translate(@(Noded.pos.x)px, @(Noded.pos.y)px); 
  filter: @(Top && (Held || Pull) ? "drop-shadow(2px 4px 6px #00000033)" : "unset");
">
  <input @bind="Noded.name" @bind:event="oninput" type="text" style="
    width: @(Noded.area.x)px;
  " />
  <textarea @bind="Noded.text" @bind:event="oninput" style="
    width: @(Noded.area.x)px; height: @(Noded.area.y)px; 
    background-color: @(Top && Cull ? "red" : "white");
    color: @(Top && Cull ? "white" : "black");
  "></textarea>
  <div hidden="@(!Edit)" style="
    user-select: none; moz-user-select: none; -webkit-user-select: none;
    position: fixed; top: 0; left: 0; right: 0; bottom: 0;
    background-color:  @(Top && Held ? "#ffffff80" : "#80808080");
    outline: 2px solid @(Top && Pull ? "#ffffffff" : "#ffffff80");
    outline-offset: -2px;
    border-radius: 8px;
  ">
  @* a circle in each corner *@
    @* <div style="
      position: fixed;
      left: 0; top: 0;
      background-color: white; 
      width: 10px; 
      height: 10px;
      border-radius: 5px;
    "></div>
    <div style="
      position: fixed;
      right: 0; top: 0;
      background-color: white; 
      width: 10px; 
      height: 10px;
      border-radius: 5px;
    "></div>
    <div style="
      position: fixed;
      left: 0; bottom: 0;
      background-color: white; 
      width: 10px; 
      height: 10px;
      border-radius: 5px;
    "></div> *@
    <div style="
      position: fixed;
      right: 5px; bottom: 5px;
      background-color: white; 
      width: 10px; 
      height: 10px;
      border-radius: 5px;
    "></div>
  </div>
</div>


<div style="
  width: 1px; height: 1px;
  position: fixed;
  transform: translate(@(Noded.pos.x)px, @(Noded.pos.y)px);
  background-color: magenta;
  display: none;
"></div>
<div style="
  width: 1px; height: 1px;
  position: fixed;
  transform: translate(@(Noded.pos.x + Noded.area.x + 20)px, @(Noded.pos.y + Noded.area.y + 40)px);
  background-color: magenta;
  display: none;
"></div>

@code {
  [Parameter]
  public Node Noded { get; set; } = new Node();
  [Parameter]
  public int Index { get; set; }

  @* [Parameter]
  public Action<bool> AddNode { get; set; } *@

  [Parameter] public bool Top  { get; set; }
  [Parameter] public bool Next { get; set; }


  string outlineColor { get {
    string color    = "#00000022";
    if (Top) color  = "#ffffffff";
    if (Next) color = "#000000ff";
    return color;
  }}

  [Parameter] public bool Edit { get; set; }
  [Parameter] public bool Held { get; set; }
  [Parameter] public bool Pull { get; set; }
  [Parameter] public bool Cull { get; set; }
}

@* 
@onmousedown="() => AddNode(true)"
@onmousedown="@(Shelved ? IndexBased.AddNode : ()=> {})"
 *@