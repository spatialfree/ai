@page "/"
@* @using ai.Data *@
@inject ILocalStorageService localStorage


@foreach (var scroll in Scrolls) {
	<div class="scroll">
		<input @bind="scroll.Label" />
		<textarea @bind="scroll.Text"></textarea>
		@* <input type="checkbox" @bind="scroll.IsDone" /> *@
	</div>
	<br>
}
<br>

<div style="display: flex; max-width: 600px; margin: 0 auto;">
	<button @onclick="Back"><span class="oi oi-arrow-left "></span></button>
	<button @onclick="Swap"><span class="oi oi-collapse-up"></span></button>
	<button @onclick="Next"><span class="oi oi-arrow-right"></span></button>
</div>
<br>

<div class="scroll">
	<input @bind="Choices[ChoiceIndex].Label" />
	<textarea @bind="Choices[ChoiceIndex].Text"></textarea>
</div>
<br>
<br>

<button @onclick="Complete" class="@(Loading ? "disabled" : "")">
	<svg class="@(Loading ? "spin" : "")" xmlns="http://www.w3.org/2000/svg" height="36" viewBox="0 0 32 32">
		@* <circle cx="16" cy="16" r="1" /> *@
		<g transform="translate(1.4, 1.23)">
			<path d="M27.21,12.08c.67-2.01,.44-4.21-.63-6.04-1.61-2.8-4.85-4.24-8.01-3.57C17.16,.89,15.14-.01,13.02,0c-3.23,0-6.1,2.08-7.1,5.15-2.08,.43-3.87,1.73-4.92,3.57-1.62,2.8-1.25,6.32,.92,8.72-.67,2.01-.44,4.21,.63,6.03,1.61,2.81,4.85,4.25,8.02,3.58,1.4,1.58,3.42,2.49,5.54,2.48,3.23,0,6.1-2.08,7.1-5.15,2.08-.43,3.87-1.73,4.91-3.57,1.63-2.8,1.26-6.32-.91-8.72Zm-2.3-5.07c.64,1.12,.88,2.43,.66,3.7-.04-.03-.12-.07-.17-.1l-5.88-3.4c-.3-.17-.67-.17-.97,0l-6.89,3.98v-2.92l5.69-3.29c2.65-1.53,6.03-.62,7.56,2.03Zm-13.25,6.07l2.9-1.68,2.9,1.68v3.35l-2.9,1.68-2.9-1.68v-3.35ZM13.01,1.93c1.3,0,2.55,.45,3.55,1.28-.04,.02-.12,.07-.18,.1l-5.88,3.39c-.3,.17-.48,.49-.48,.84v7.96l-2.53-1.46V7.46c0-3.06,2.47-5.53,5.53-5.54ZM2.68,9.69h0c.65-1.12,1.66-1.98,2.88-2.43v6.99c0,.35,.18,.66,.48,.84l6.88,3.97-2.54,1.47-5.68-3.28c-2.64-1.53-3.55-4.91-2.02-7.56Zm1.55,12.83h0c-.65-1.11-.88-2.43-.66-3.7,.04,.03,.12,.07,.17,.1l5.88,3.4c.3,.17,.67,.17,.97,0l6.88-3.98v2.92l-5.69,3.28c-2.65,1.52-6.03,.62-7.56-2.02Zm11.89,5.08c-1.29,0-2.55-.45-3.54-1.28,.04-.02,.13-.07,.18-.1l5.88-3.39c.3-.17,.49-.49,.48-.84v-7.95l2.53,1.46v6.57c0,3.06-2.48,5.54-5.53,5.54Zm10.34-7.76c-.65,1.12-1.67,1.98-2.88,2.42v-6.99c0-.35-.18-.67-.48-.84h0l-6.89-3.98,2.53-1.46,5.69,3.28c2.65,1.53,3.55,4.91,2.02,7.56Z"></path>
		</g>
	</svg>
</button>
<br><br><br>
<br><br><br>
<br><br><br>

<div class="scroll" style="text-align: center;">
	<span class="oi oi-key" style="color: @(Authorized ? "#00cc00" : "#800000"); font-size: 24px;"></span>
	<br><br>
	<input @bind="ApiKey" type="password" placeholder="sk-XXXXX..." class="key" spellCheck=false />
	<br>
	<a href="https://beta.openai.com/account/api-keys" target="_blank">
		<span class="oi oi-link-intact" style=""></span>&nbsp;
		Get API Key
	</a>
	<br>
</div>
<br><br><br>

<div style="display: @(Authorized ? "block": "none"); text-align: center;">
	<span class="oi oi-text" style="font-size:24px; color:white;"></span>
	<br><br>
	<input @bind="MaxTokens" type="range" min="16" max="2048" step="2" />
																									@* <input type="checkbox" /> 2x boost *@
	<br><br><br>

	<span class="oi oi-pulse" style="font-size:24px; color:white;"></span>
	<br><br>
	<input @bind="Temperature" type="range" min="0" max="1" step="0.01" />
	<br><br><br>

	<span class="oi oi-contrast" style="font-size:24px; color:white;"></span>
	<br><br>
	<input @bind="Contrast" type="range" min="-1.9" max="1.9" step="0.1" />
	<br><br><br>

	<span class="oi oi-loop-circular" style="font-size:24px; color:white;"></span>
	<br><br>
	<input @bind="Repeat" type="range" min="-1.9" max="1.9" step="0.1" />
	<br><br><br>
</div>


<br><br><br>
<br><br><br>
<br><br><br>



@code {
	List<Scroll> Scrolls = new() {
		new Scroll {
			Label = "Instruction",
			Text = "Augment the input with a variety of descriptive language tools and elaborate phrasing that will help to improve and enhance it.",
		},
		new Scroll {
			Label = "Input",
			Text = "Get good.",
		},
	};

	int ChoiceIndex = 0;
	void Back() { ChoiceIndex = ChoiceIndex == 0 ? Choices.Count - 1 : ChoiceIndex - 1; }
	void Next() { ChoiceIndex = ChoiceIndex == Choices.Count - 1 ? 0 : ChoiceIndex + 1; }
	List<Scroll> Choices = new() {
		new Scroll { Label = "Choice #1", Color = "#ff8080", },
		new Scroll { Label = "Choice #2", Color = "#80ff80", },
		new Scroll { Label = "Choice #3", Color = "#8080ff", },
	};

	void Swap() {
		var txt = Scrolls[1].Text;
		Scrolls[1].Text = Choices[ChoiceIndex].Text;
		Choices[ChoiceIndex].Text = txt;
	}

	int   MaxTokens   = 256;
	float Temperature = 1.0f;
	float Contrast    = 0.0f;
	float Repeat      = 0.0f;

	bool Loading = false;
	async Task Complete() {
		if (Authorized && !Loading) {
			Loading = true;

			Choices = Choices.Select(x => { x.Text = ""; return x; }).ToList();

			CompletionRequest request = new CompletionRequest();
			request.Model = OpenAI.Models.Model.Davinci;
			request.Prompt = Scrolls[1].Full + Scrolls[0].Full + "Input (Augmented):\n";
			request.MaxTokens = MaxTokens;
			request.Temperature = Temperature;
			request.PresencePenalty = Contrast;
			request.FrequencyPenalty = -Repeat;
			request.NumChoicesPerPrompt = 3;

			var endpoint = API.CompletionsEndpoint;
			await foreach (var token in endpoint.StreamCompletionEnumerableAsync(request)) {
				var index = token.Completions[0].Index;
				Choices[index].Text += token.Completions[0].Text;
				Choices[index].Text = Choices[index].Text.TrimStart('\n');
				
				StateHasChanged();
			}

			// await Task.Delay(3000);
			Loading = false;
		}
	}

	string ApiKey = "";
	OpenAIClient? API;
	bool Authorized = false;

	IEnumerable<string> Keys { get; set; } = new List<string>();
	protected override async Task OnAfterRenderAsync(bool firstRender) {
		Keys = await localStorage.KeysAsync();
		if (firstRender) {
			await LoadKey();
			StateHasChanged();
		}

		await SaveKey();
	}

	async Task LoadKey() {
		ApiKey = await localStorage.GetItemAsync<string>("apikey");
		if (string.IsNullOrEmpty(ApiKey)) { ApiKey = ""; }
	}

	string lastTry = "";
	async Task SaveKey() {
		if (ApiKey == lastTry)
			return;
		lastTry = ApiKey;

		string storageKey = await localStorage.GetItemAsync<string>("apikey");
		if (ApiKey == storageKey && Authorized)
			return;

		try {
			API = new OpenAIClient(new OpenAIAuthentication(ApiKey));
			var model = await API.ModelsEndpoint.GetModelDetailsAsync("text-davinci-003");
			Authorized = true;
		}
		catch {
			API = null; // not memory safe
			Authorized = false;
		}

		await localStorage.SetItemAsync("apikey", ApiKey);
		Keys = await localStorage.KeysAsync();
		StateHasChanged();
	}

/*

NOTES
	max_tokens  slider
	temperature slider
	Rewrite the token system to be persistent and time mapped
	totalTokens += result.Usage.TotalTokens;
	Console.WriteLine($"+{result.Usage.TotalTokens} | {totalTokens}");
	extensible localStorage based on key system


GRAVEYARD
	<PageTitle>Index</PageTitle>
	<h1>Index</h1>
	<h3>Todo (@todos.Count(todo => !todo.IsDone))</h3>

	<p>@completion</p>
	color: @Choices[ChoiceIndex].Color
	@bind:event="oninput" style="height: @(Rows(scroll.Text, 89))pc"
	localStorage.Changed += (_, e) => {
		Console.WriteLine($"  key: {e.Key} \n from: {e.OldValue} \n   to: {e.NewValue}");
	};
	async Task oninput(ChangeEventArgs e) {
		StateHasChanged();
	}

*/
}